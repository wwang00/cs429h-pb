// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/01/2019 11:45:02"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ppm_decoder
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ppm_decoder_vlg_vec_tst();
// constants                                           
// general purpose registers
reg in;
// wires                                               
wire ch_5_9;
wire ch_5_8;
wire ch_5_7;
wire ch_5_6;
wire ch_5_5;
wire ch_5_4;
wire ch_5_3;
wire ch_5_2;
wire ch_5_1;
wire ch_5_0;
wire ch_4_9;
wire ch_4_8;
wire ch_4_7;
wire ch_4_6;
wire ch_4_5;
wire ch_4_4;
wire ch_4_3;
wire ch_4_2;
wire ch_4_1;
wire ch_4_0;
wire ch_3_9;
wire ch_3_8;
wire ch_3_7;
wire ch_3_6;
wire ch_3_5;
wire ch_3_4;
wire ch_3_3;
wire ch_3_2;
wire ch_3_1;
wire ch_3_0;
wire ch_2_9;
wire ch_2_8;
wire ch_2_7;
wire ch_2_6;
wire ch_2_5;
wire ch_2_4;
wire ch_2_3;
wire ch_2_2;
wire ch_2_1;
wire ch_2_0;
wire ch_1_9;
wire ch_1_8;
wire ch_1_7;
wire ch_1_6;
wire ch_1_5;
wire ch_1_4;
wire ch_1_3;
wire ch_1_2;
wire ch_1_1;
wire ch_1_0;
wire ch_0_9;
wire ch_0_8;
wire ch_0_7;
wire ch_0_6;
wire ch_0_5;
wire ch_0_4;
wire ch_0_3;
wire ch_0_2;
wire ch_0_1;
wire ch_0_0;

// assign statements (if any)                          
ppm_decoder i1 (
// port map - connection between master ports and signals/registers   
	.in(in)
);
initial 
begin 
#1000000 $finish;
end 

// in
initial
begin
	in = 1'b0;
end 
endmodule

